name: Deploy ASTERRA Assignment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: asterra-app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt

    - name: Lint with flake8
      run: |
        flake8 docker/geojson-processor/app.py --count --select=E9,F63,F7,F82 --show-source --statistics || true
        flake8 docker/geojson-processor/app.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true

    - name: Format with black
      run: |
        black --check docker/geojson-processor/app.py || true

    - name: Test with pytest
      run: |
        pytest docker/geojson-processor/tests/

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for tags

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Increment version and create tag
      id: version
      run: |
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Get latest tag, or start with v0.0.0 if no tags exist
        git fetch --tags
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"
        
        # Extract version numbers (remove 'v' prefix)
        VERSION=${LATEST_TAG#v}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
        
        # Increment patch version (you can customize this logic)
        PATCH=$((PATCH + 1))
        NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
        
        echo "New version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "version_number=$MAJOR.$MINOR.$PATCH" >> $GITHUB_OUTPUT
        
        # Create and push new tag
        git tag $NEW_VERSION
        git push origin $NEW_VERSION
        
        echo "‚úÖ Created and pushed tag: $NEW_VERSION"

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        VERSION: ${{ steps.version.outputs.version }}
        VERSION_NUMBER: ${{ steps.version.outputs.version_number }}
      run: |
        cd docker/geojson-processor
        
        echo "üê≥ Building Docker image with version: $VERSION"
        
        # Build with semantic version tag
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_NUMBER .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push all tags
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_NUMBER  
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "‚úÖ Pushed Docker images:"
        echo "  - $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION"
        echo "  - $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_NUMBER"
        echo "  - $ECR_REGISTRY/$ECR_REPOSITORY:latest"

    - name: Update ECS service
      env:
        CLUSTER_NAME: asterra-cluster
        SERVICE_NAME: asterra-geojson-processor
        VERSION: ${{ steps.version.outputs.version }}
      run: |
        echo "üöÄ Updating ECS service to version: $VERSION"
        aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment
        echo "‚úÖ ECS service update initiated"

    - name: Deployment summary
      env:
        VERSION: ${{ steps.version.outputs.version }}
      run: |
        echo "üéâ Deployment Summary:"
        echo "‚úÖ Version: $VERSION"
        echo "‚úÖ Tests: Passed"
        echo "‚úÖ Docker Image: Built and pushed to ECR"
        echo "‚úÖ ECS Service: Updated"
        echo ""
        echo "üîó View deployment:"
        echo "   ECR: https://console.aws.amazon.com/ecr/repositories/asterra-app"
        echo "   ECS: https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters/asterra-cluster/services"